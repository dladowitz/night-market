require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
RSpec.describe DishesController, :type => :controller do
  let!(:dish) { create :dish }
  let!(:meal) { dish.meal }
  let!(:event){ meal.event }

  let(:valid_attributes)      { {event_id: event.id, meal_id: meal.id, dish: {name: "Sausage Pizza", category: "Main"}} }
  let(:invalid_attributes)    { {event_id: event.id, meal_id: meal.id, dish: {name: nil, category: "Bad Category"}} }

  describe "GET index" do
    subject { get :index, event_id: event.id, meal_id: meal.id }

    it_behaves_like "an_unauthenticated_user" do
      let(:http_request) { subject }
    end

    context "with logged in user" do
      before { login_user && subject }

      it "renders the index template" do
        expect(response).to render_template :index
      end

      it "assigns all dishes as @dishes" do
        expect(assigns(:dishes)).to eq [dish]
      end
    end
  end

  describe "GET new" do
    subject { get :new, event_id: event.id, meal_id: meal.id }

    it_behaves_like "an_unauthenticated_user" do
      let(:http_request) { subject }
    end

    context "with a logged in user" do
      before { login_user && subject }

      it "assigns a new dish as @dish" do
        expect(assigns(:dish)).to be_a_new Dish
      end

      it "belongs to meal" do
        expect(assigns(:dish).meal).to eq meal
      end

      it "renders the new template" do
        expect(response).to render_template :new
      end
    end
  end

  describe "POST create" do
    it_behaves_like "an_unauthenticated_user" do
      let(:http_request) { post :create, valid_attributes }
    end

    context "with a logged in user" do
      before { login_user }

      describe "with valid params" do
        subject { post :create, valid_attributes }

        it "creates a new Dish" do
          expect{ subject }.to change(Dish, :count).by 1
        end

        it "assigns a newly created dish as @dish" do
          subject
          expect(assigns(:dish)).to be_a(Dish)
          expect(assigns(:dish)).to be_persisted
        end

        it "redirects to the created dish" do
          subject
          expect(response).to redirect_to event_meal_dish_path(event, meal, assigns(:dish))
        end
      end

      describe "with invalid params" do
        subject { post :create, invalid_attributes }

        it "assigns a newly created but unsaved dish as @dish" do
          subject
          expect(assigns(:dish)).to be_a_new(Dish)
        end

        it "does not create a record in the database" do
          expect{ subject }.to_not change{Dish.count}
        end

        it "re-renders the 'new' template" do
          subject
          expect(response).to render_template("new")
        end
      end
    end
  end

  describe "GET show" do
    subject { get :show, event_id: event.id, meal_id: meal.id, id: dish_id }

    it_behaves_like "an_unauthenticated_user" do
      let(:dish_id) { 1 }
      let(:http_request) { subject }
    end

    context "with a logged in user" do
      before { login_user && subject }

      context "when the dish is in the database" do
        let(:dish_id) { dish.id }

        it "renders the show template" do
          expect(response).to render_template :show
        end

        it "assigns the requested dish as @dish" do
          expect(assigns(:dish)).to eq dish
        end
      end

      context "when the dish is not found in the databaase" do
        let(:dish_id) { "Not a real ID" }

        it "doesn't find the dish" do
          expect(assigns(:dish)).to be_nil
        end

        it "redirects to the event_meal_dishes index page" do
          expect(response).to redirect_to event_meal_dishes_path(event, meal)
        end

        it "sets a flash messsage" do
          expect(flash[:danger]).to eq "Listen up pilgram. That's not a dish we've seen round these parts."
        end
      end
    end
  end

  describe "GET edit" do
    subject { get :edit, event_id: event.id, meal_id: meal.id, id: dish_id }

    it_behaves_like "an_unauthenticated_user" do
      let(:dish_id) { 1 }
      let(:http_request) { subject }
    end

    context "with a logged in user" do
      before { login_user && subject }

      context "when dish is found in the database" do
        let(:dish_id) { dish.id }

        it "assigns the requested dish as @dish" do
          expect(assigns(:dish)).to eq dish
        end

        it "renders the edit template" do
          expect(response).to render_template :edit
        end
      end

      context "when dish is not found in the database" do
        let(:dish_id) { "Not a real ID" }

        it "@dish is nil" do
          expect(assigns(:dish)).to be_nil
        end

        it "renders the index page" do
          expect(response).to redirect_to event_meal_dishes_path(event, meal)
        end
      end
    end
  end

  describe "PUT update" do
    subject { put :update, event_id: event.id, meal_id: meal.id, id: dish.id, dish: new_attributes}

    it_behaves_like "an_unauthenticated_user" do
      let(:new_attributes) { "any" }
      let(:http_request) { subject }
    end

    context "with a logged in user" do
      before  { login_user && subject }

      describe "with valid params" do
        let(:new_attributes) { {name: "Chicken Wings"} }

        it "updates the requested dish" do
          expect(dish.reload.name).to eq "Chicken Wings"
        end

        it "assigns the requested dish as @dish" do
          expect(assigns(:dish)).to eq dish
        end

        it "redirects to the dish" do
          expect(response).to redirect_to event_meal_dish_path(event, meal, dish)
        end
      end

      describe "with invalid params" do
        let(:new_attributes) { {name: nil} }

        it "does not update the dish" do
          expect(dish.reload.name).to eq "Cheese Pizza"
        end

        it "re-renders the 'edit' template" do
          expect(response).to render_template "edit"
        end
      end
    end
  end

  describe "DELETE destroy" do
    subject { delete :destroy, event_id: event.id, meal_id: meal.id, id: dish_id}

    it_behaves_like "an_unauthenticated_user" do
      let(:dish_id) { "any" }
      let(:http_request) { subject }
    end

    context "with a logged in user" do
      before { login_user }

      context "when the dish is found" do
        let(:dish_id) { dish.id }

        it "destroys the requested dish" do
          expect { subject }.to change(Dish, :count).by -1
        end

        it "redirects to the dishes list" do
          subject
          expect(response).to redirect_to event_meal_dishes_path(event, meal)
        end
      end

      context "when the dish is not found" do
        let(:dish_id) { "Not a real ID" }

        it "does not delete any records from the database" do
          expect{ subject }.to_not change{ Dish.count }
        end

        it "sets @dish to be nil" do
          subject
          expect(assigns(:dish)).to be nil
        end
      end
    end
  end
end
