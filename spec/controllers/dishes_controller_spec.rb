require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.

RSpec.describe DishesController, :type => :controller do

  let!(:dish) { create :dish }
  let!(:meal) { dish.meal }
  let!(:event){ meal.event }

  let(:valid_attributes)      { {event_id: event.id, meal_id: meal.id, dish: {name: "Sausage Pizza", category: "Main"}} }
  let(:invalid_attributes)    { {event_id: event.id, meal_id: meal.id, dish: {name: nil, category: "Bad Category"}} }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # DishesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    subject { get :index, event_id: event.id, meal_id: meal.id }
    before { subject }

    it "renders the index template" do
      expect(response).to render_template :index
    end

    it "assigns all dishes as @dishes" do
      expect(assigns(:dishes)).to eq [dish]
    end
  end

  describe "GET new" do
    subject { get :new, event_id: event.id, meal_id: meal.id }
    before { subject }

    it "assigns a new dish as @dish" do
      expect(assigns(:dish)).to be_a_new Dish
    end

    it "belongs to meal" do
      expect(assigns(:dish).meal).to eq meal
    end

    it "renders the new template" do
      expect(response).to render_template :new
    end
  end

  describe "POST create" do
    describe "with valid params" do
      subject { post :create, valid_attributes }

      it "creates a new Dish" do
        expect{ subject }.to change(Dish, :count).by 1
      end

      it "assigns a newly created dish as @dish" do
        subject
        expect(assigns(:dish)).to be_a(Dish)
        expect(assigns(:dish)).to be_persisted
      end

      it "redirects to the created dish" do
        subject
        expect(response).to redirect_to event_meal_dish_path(event, meal, assigns(:dish))
      end
    end

    describe "with invalid params" do
      subject { post :create, invalid_attributes }

      it "assigns a newly created but unsaved dish as @dish" do
        subject
        expect(assigns(:dish)).to be_a_new(Dish)
      end

      it "does not create a record in the database" do
        expect{ subject }.to_not change{Dish.count}
      end

      it "re-renders the 'new' template" do
        subject
        expect(response).to render_template("new")
      end
    end
  end

  describe "GET show" do
    subject { get :show, event_id: event.id, meal_id: meal.id, id: dish_id }
    before { subject }

    context "when the dish is in the database" do
      let(:dish_id) { dish.id }

      it "renders the show template" do
        expect(response).to render_template :show
      end

      it "assigns the requested dish as @dish" do
        expect(assigns(:dish)).to eq dish
      end
    end

    context "when the dish is not found in the databaase" do
      let(:dish_id) { "Not a real ID" }

      it "doesn't find the dish" do
        expect(assigns(:dish)).to be_nil
      end

      it "redirects to the event_meal_dishes index page" do
        expect(response).to redirect_to event_meal_dishes_path(event, meal)
      end

      it "sets a flash messsage" do
        expect(flash[:danger]).to eq "Listen up pilgram. That's not a dish we've seen round these parts."
      end
    end
  end

  describe "GET edit" do
    subject { get :edit, event_id: event.id, meal_id: meal.id, id: dish_id }
    before { subject }

    context "when dish is found in the database" do
      let(:dish_id) { dish.id }

      it "assigns the requested dish as @dish" do
        expect(assigns(:dish)).to eq dish
      end

      it "renders the edit template" do
        expect(response).to render_template :edit
      end
    end

    context "when dish is not found in the database" do
      let(:dish_id) { "Not a real ID" }

      it "@dish is nil" do
        expect(assigns(:dish)).to be_nil
      end

      it "renders the index page" do
        expect(response).to redirect_to event_meal_dishes_path(event, meal)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested dish" do
        dish = Dish.create! valid_attributes
        put :update, {:id => dish.to_param, :dish => new_attributes}, valid_session
        dish.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested dish as @dish" do
        dish = Dish.create! valid_attributes
        put :update, {:id => dish.to_param, :dish => valid_attributes}, valid_session
        expect(assigns(:dish)).to eq(dish)
      end

      it "redirects to the dish" do
        dish = Dish.create! valid_attributes
        put :update, {:id => dish.to_param, :dish => valid_attributes}, valid_session
        expect(response).to redirect_to(dish)
      end
    end

    describe "with invalid params" do
      it "assigns the dish as @dish" do
        dish = Dish.create! valid_attributes
        put :update, {:id => dish.to_param, :dish => invalid_attributes}, valid_session
        expect(assigns(:dish)).to eq(dish)
      end

      it "re-renders the 'edit' template" do
        dish = Dish.create! valid_attributes
        put :update, {:id => dish.to_param, :dish => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested dish" do
      dish = Dish.create! valid_attributes
      expect {
        delete :destroy, {:id => dish.to_param}, valid_session
      }.to change(Dish, :count).by(-1)
    end

    it "redirects to the dishes list" do
      dish = Dish.create! valid_attributes
      delete :destroy, {:id => dish.to_param}, valid_session
      expect(response).to redirect_to(dishes_url)
    end
  end

end
